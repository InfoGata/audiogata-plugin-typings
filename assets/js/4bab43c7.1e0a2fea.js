"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[3417],{1650:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var t=e(4848),s=e(8453);const r={sidebar_position:1},l="Plugin Manifest",o={id:"plugins/plugin-manifest",title:"Plugin Manifest",description:"Plugins must have a manifest.json file in the plugin's root folder.",source:"@site/docs/plugins/plugin-manifest.md",sourceDirName:"plugins",slug:"/plugins/plugin-manifest",permalink:"/audiogata-plugin-typings/plugins/plugin-manifest",draft:!1,unlisted:!1,editUrl:"https://github.com/InfoGata/audiogata-plugin-typings/tree/master/docs/docs/plugins/plugin-manifest.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"AudioGata",permalink:"/audiogata-plugin-typings/"},next:{title:"Plugin Installation",permalink:"/audiogata-plugin-typings/plugins/installation"}},a={},p=[{value:"id?: string",id:"id-string",level:2},{value:"name: string",id:"name-string",level:2},{value:"description?: string",id:"description-string",level:2},{value:"version?: string",id:"version-string",level:2},{value:"script: string",id:"script-string",level:2},{value:"options?: string",id:"options-string",level:2},{value:"updateUrl?: string",id:"updateurl-string",level:2},{value:"hompage?: string",id:"hompage-string",level:2}];function d(n){const i={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"plugin-manifest",children:"Plugin Manifest"}),"\n",(0,t.jsxs)(i.p,{children:["Plugins must have a ",(0,t.jsx)(i.code,{children:"manifest.json"})," file in the plugin's root folder."]}),"\n",(0,t.jsx)(i.p,{children:"Example:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",metastring:"title=manifest.json",children:'{\n  "id": "xxxxxxxxxxx",\n  "name": "PluginName",\n  "description": "description",\n  "version": "1.1.1",\n  "script": "dist/script.js",\n  "options": "dist/options.html",\n  "updateUrl": "https://example.com/manifest.json",\n  "homepage": "https://example.com"\n}\n'})}),"\n",(0,t.jsx)(i.h2,{id:"id-string",children:"id?: string"}),"\n",(0,t.jsx)(i.p,{children:"The plugin's unique. If no id is provided, a random id will be used instead."}),"\n",(0,t.jsx)(i.h2,{id:"name-string",children:"name: string"}),"\n",(0,t.jsx)(i.p,{children:"Name of plugin"}),"\n",(0,t.jsx)(i.h2,{id:"description-string",children:"description?: string"}),"\n",(0,t.jsx)(i.p,{children:"Description of plugin."}),"\n",(0,t.jsx)(i.h2,{id:"version-string",children:"version?: string"}),"\n",(0,t.jsx)(i.p,{children:"Version number of plugin."}),"\n",(0,t.jsx)(i.h2,{id:"script-string",children:"script: string"}),"\n",(0,t.jsx)(i.p,{children:"Javascript file containing the plugin code."}),"\n",(0,t.jsx)(i.h2,{id:"options-string",children:"options?: string"}),"\n",(0,t.jsx)(i.p,{children:"Optional HTML file for the plugin's options page."}),"\n",(0,t.jsx)(i.h2,{id:"updateurl-string",children:"updateUrl?: string"}),"\n",(0,t.jsx)(i.p,{children:"Optional url to get future updated versions of the manifest.json file."}),"\n",(0,t.jsx)(i.h2,{id:"hompage-string",children:"hompage?: string"}),"\n",(0,t.jsx)(i.p,{children:"Optional URL for the plugin's home page."})]})}function u(n={}){const{wrapper:i}={...(0,s.R)(),...n.components};return i?(0,t.jsx)(i,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,i,e)=>{e.d(i,{R:()=>l,x:()=>o});var t=e(6540);const s={},r=t.createContext(s);function l(n){const i=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(i):{...i,...n}},[i,n])}function o(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:l(n.components),t.createElement(r.Provider,{value:i},n.children)}}}]);